"use strict";(self.webpackChunkmg_documentation=self.webpackChunkmg_documentation||[]).push([[777],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,v=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(v,r(r({ref:t},u),{},{components:n})):a.createElement(v,r({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<l;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1071:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=["components"],s={},o="SHERLOCK ANALYTICS MODULE",c={unversionedId:"Sherlock Analytics",id:"Sherlock Analytics",isDocsHomePage:!1,title:"SHERLOCK ANALYTICS MODULE",description:"Introduction",source:"@site/docs/Sherlock Analytics.md",sourceDirName:".",slug:"/Sherlock Analytics",permalink:"/documentation/docs/Sherlock Analytics",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Sherlock Analytics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PROMOTER CROSS PROMOTION MODULE",permalink:"/documentation/docs/Promoter"},next:{title:"Stash Quick Start",permalink:"/documentation/docs/Stash"}},u=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"How to Use",id:"how-to-use",children:[],level:2},{value:"How does This Work",id:"how-does-this-work",children:[],level:2},{value:"Tracking Level Timing",id:"tracking-level-timing",children:[],level:2},{value:"API &amp; Details",id:"api--details",children:[{value:"Sherlock",id:"sherlock",children:[],level:3},{value:"Adjust Analytics Service",id:"adjust-analytics-service",children:[],level:3},{value:"Admost Analytics Service:",id:"admost-analytics-service",children:[],level:3},{value:"Firebase Analytics Service:",id:"firebase-analytics-service",children:[],level:3},{value:"LevelTimeStatManager",id:"leveltimestatmanager",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,s=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"sherlock-analytics-module"},"SHERLOCK ANALYTICS MODULE"),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Sherlock module is a proxy module for initializing multiple analytics services at the same time. It also\nprovides an event importer that can import adjust analytics events from a CSV file, and generates\nthe same events for all other analytics services that support custom event mapping."),(0,l.kt)("h2",{id:"how-to-use"},"How to Use"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Import package from Package Manager UI."),(0,l.kt)("li",{parentName:"ul"},"Import analytics service implementations that you want to use from Package Manager UI."),(0,l.kt)("li",{parentName:"ul"},"Make sure to call ",(0,l.kt)("inlineCode",{parentName:"li"},"Sherlock.Instance.Initialize()")," at the appropriate place."),(0,l.kt)("li",{parentName:"ul"},"Open ",(0,l.kt)("inlineCode",{parentName:"li"},"Matchingham > Analytics > Config"),". Make sure ",(0,l.kt)("inlineCode",{parentName:"li"},"Enabled")," checkbox is checked."),(0,l.kt)("li",{parentName:"ul"},"Open ",(0,l.kt)("inlineCode",{parentName:"li"},"Matchingham > Analytics > Import Events")," menu and open ",(0,l.kt)("inlineCode",{parentName:"li"},"Event Importer"),".",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Event Importer")," parses events from a file in CSV format.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"event name,adjusttoken,[OPTIONAL]conversion value\n"))))),(0,l.kt)("li",{parentName:"ul"},"Each supported service provides an interface. To send analytics to a certain service, request that service\nfrom Sherlock Analytics Module and use the returned instance.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If you request a supported service that is not imported, Sherlock will return a Null Object that will\nmock the API calls. This allows the code base to remain the same even if some analytics services are\nremoved from the project.")))),(0,l.kt)("p",null,"Sample level analytics calls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},'Sherlock.Instance.GetService<IAdjustAnalyticsService>().SendCustom(SherlockUtility.GetLevelEventName(level, "start"));\nSherlock.Instance.GetService<IFirebaseAnalyticsService>().SendCustom(SherlockUtility.GetLevelEventName(level, "start"));\nSherlock.Instance.GetService<IFirebaseAnalyticsService>().SendLevelStart($"level{level}");\n')),(0,l.kt)("p",null,"Sample custom analytics event calls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c#"},"Sherlock.Instance.GetService<IAdjustAnalyticsService>().SendCustom(EventNames.GameStart);\nSherlock.Instance.GetService<IFirebaseAnalyticsService>().SendCustom(EventNames.GameStart);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"EventName")," class is auto generated. This happens when CSV file is imported from the event importer.")),(0,l.kt)("h2",{id:"how-does-this-work"},"How does This Work"),(0,l.kt)("p",null,"Sherlock event definition logic works centered around adjust events. Below is a sample adjust events CSV file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"iap_cons,9qhpc0\niap_cons_existingpurchasepending,uacknj\niap_cons_paymentdeclined,dd8nu8\niap_cons_productunavailable,9u28pf\niap_cons_purchasingunavailable,4y3cd3\niap_cons_signatureinvalid,7skdqp\niap_subs,hzhgi\niap_noncons,qnm8wl\nlevel1_complete,t494ux,2\nlevel1_fail,347c9h\nlevel1_start,q9hv5v\nlevel2_complete,ws75fg,3\nlevel2_fail,s4xg0l\nlevel2_start,9qktjs\ngame_start,yl9fo9,1\n")),(0,l.kt)("p",null,"This file is imported to the project using the ",(0,l.kt)("inlineCode",{parentName:"p"},"Mathingham > Analytics > Import Events"),". After the file is selected,\nhit the ",(0,l.kt)("inlineCode",{parentName:"p"},"Import and Generate Event Names")," button."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Importer",src:n(1255).Z})),(0,l.kt)("p",null,"Once this operation is complete, the file will be parsed and events will be generated. You can see and\nfurther configure these events from the settings inspector. To Open settings inspector, use the\n",(0,l.kt)("inlineCode",{parentName:"p"},"Matchingham > Analytics > Config")," menu."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Config menu",src:n(5033).Z})),(0,l.kt)("p",null,"Adjust requires developers to send conversion events if the user doesn't allow ATT. Conversion event\nand value configuration is configured here. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To make an event a conversion event, check the ",(0,l.kt)("inlineCode",{parentName:"li"},"Is Conversion Event")," checkbox and set the ",(0,l.kt)("inlineCode",{parentName:"li"},"Conversion Value")," field")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Config Editor",src:n(6212).Z})),(0,l.kt)("h2",{id:"tracking-level-timing"},"Tracking Level Timing"),(0,l.kt)("p",null,"To track how much time a player spends in a level, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"LevelTimeStatManager.Instance.StartLevel(level:int)"),"\nand ",(0,l.kt)("inlineCode",{parentName:"p"},"LevelTimeStatManager.Instance.FinishLevel(level:int)")," methods. By default, level time manager pauses time\nstat tracking when app loses focus. This behaviour can be disabled by setting ",(0,l.kt)("inlineCode",{parentName:"p"},"LevelTimeStatManager.Instance.OverridePuase"),"\nflag to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),". Then you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"LevelTimeStatManager.Instance.PauseLevel(level:int)")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"LevelTimeStatManager.Instance.Resume(level:int)")," methods to pause and resume levels according to your own flow."),(0,l.kt)("h2",{id:"api--details"},"API & Details"),(0,l.kt)("h3",{id:"sherlock"},"Sherlock"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Initialize()"),": Starts module initialization. You need to call this at the\nappropriate place")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"RegisterService(service: IAnalyticsService)"),": Used to register analytics services to Sherlock\nmodule. This method is only used by analytics service adapters.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"GetService < T > ()"),": Returns current implementation of the requested service type. Currently requested\nservice types:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"IAdjustAnalyticsService"),(0,l.kt)("li",{parentName:"ul"},"IFirebaseAnalyticsService"),(0,l.kt)("li",{parentName:"ul"},"IAdmostAnalyticsService")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"WhenInitialized(Action)"),": Allows you to register a callback that will be fired only\nafter the module is successfully initialized. Use this to execute logic that requires\nthis module to be initialized first. If the module has already initialized, immediately\ninvokes the callback.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"WhenFailedToInitialize(Action)"),": Allows you to register a callback that will be fired only after\nthe module fails to initialize for any reason. Use this to handle what should happen\nin case this module fails to initialize. If the module has already failed to initialize, immediately\ninvokes the callback.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"WhenReady(Action)"),": Combined version of ",(0,l.kt)("inlineCode",{parentName:"li"},"WhenInitialized")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"WhenFailedToInitialize"),".\nDelays execution of callback till module is first initialized or failed to initialize, immediately invoke\nthe callback if it is already initialized or failed to initialize.")),(0,l.kt)("h3",{id:"adjust-analytics-service"},"Adjust Analytics Service"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendCustom(eventName: string, parameters: Dictionary<string, object> (null))"),":\nAllows sending a custom, self styled analytics event. Most of the events are sent\nwith this method.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendAdRevenue(source: string, payload: string)"),": Ad revenue tracking event.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendECPMEvent(eventName: string, ecpm: float, currency: string)"),": ECPM tracking event.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendInAppPurchaseRevenueEvent(eventName: string, price: float, currency: string)"),": In App Purchase\nrevenue event.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendInAppPurchaseRevenueEvent(eventName: string, transactionId: string, price: float, currency: string)"),":\nOverload of ",(0,l.kt)("inlineCode",{parentName:"li"},"SendInAppPurchasEvent"),". This accepts an additional ",(0,l.kt)("inlineCode",{parentName:"li"},"transactionId")," parameter.\n")),(0,l.kt)("h3",{id:"admost-analytics-service"},"Admost Analytics Service:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"SendCustom(eventName: string, parameters: Dictionary<string, object> (null))"),":\nAllows sending a custom, self styled analytics event. Most of the events are sent\nwith this method.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"SendIapEvent(tags: string[], identifier: string, receipt: string, isoCurrencyCode: string, localPrice: float)"),":\nAdmost in app purchase analytics event. Accepts custom tags to categorize in app purchases. These tags can\nindicate things like which interface the purchase was made from.\n"))),(0,l.kt)("h3",{id:"firebase-analytics-service"},"Firebase Analytics Service:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendCustom(eventName: string, parameters: Dictionary<string, object> (null))"),":\nAllows sending a custom, self styled analytics event. Most of the events are sent\nwith this method.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendAppOpen()"),": When game initialization is complete, this event should be sent")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendCustomInAppPurchase(token: string, itemId: string, currencyCode: string, price: float)"),": Firebase normally\ncollects in app purchase events itself. However, if you want, you can use these to send them as a custom\nevent.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendEarnVirtualCurrency(currency: string, amount: long)"),": This event is used to log whenever the user\nearns virtual currency in game.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendEarnVirtualCurrency(currency: string, amount: double)"),": Overload of the same analytics event. Uses\na double parameter instead of long.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendLevelStart(levelName: string)"),": Firebase provides a specialized level start analytics event.\nThis method sends that event.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendLevelEnd(levelName: string, success: bool)"),": Firebase provides a specialized end start analytics event.\nThis method sends that event.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendLevelUp(level: long)"),": Firebase provides a specialized event for tracking player level ups.\nThis method sends that event.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendLevelUp(level: long, character: string)"),": Firebase provides a specialized event for tracking player level ups.\nThis method sends that event, but with an additional ",(0,l.kt)("inlineCode",{parentName:"li"},"character")," parameter. This allows which character\nwas leveled up, for more detailed usage analytics data in games with multiple character support.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendScreenView(screenName: string)"),": Firebase provides a specialized event for tracking which app screen\nis viewed. This method sends that event.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendScreenView(screenClass: string, screenName: string)"),": Firebase provides a specialized event for tracking which app screen\nis viewed. This method sends that event, but also provides the view class.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendSpendVirtualCurrency(currency: string, itemName: string, amount: long)"),": Firebase provides specialized\nevents for tracking where the user spends their virtual currency. This method sends that event\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendSpendVirtualCurrency(currency: string, itemName: string, amount: double)"),": Firebase provides specialized\nevents for tracking where the user spends their virtual currency.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendTutorialBegin()"),": Firebase provides special analytics events for tracking when the tutorial starts.\nThis method sends that event.\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SendTutorialEnd()"),": Firebase provides special analytics events for tracking when the tutorial ends.\nThis method sends that event.")),(0,l.kt)("h3",{id:"leveltimestatmanager"},"LevelTimeStatManager"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"OverridePause : bool"),": Set this flag to true if you want to handle pause/resume logic yourself")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"StartLevel(level: int)"),": Starts tracking a level. You need to calls this when user starts playin the level")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"FinishLevel(level: int)"),": Stops tracking a level and calculates passed time, sends it to firebase.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If client is offline, the stats are saved to player prefs to be sent later.")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"PauseLevel(level: int)"),": Pauses time tracking for a level. The level must be started first.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"ResumeLevel(level: int)"),": Resumes time tracking for a level. The level must be started first.")))}d.isMDXComponent=!0},6212:function(e,t,n){t.Z=n.p+"assets/images/analytics-config-editor-7d46481d72412d2ef578f5f49c1ca1d2.png"},5033:function(e,t,n){t.Z=n.p+"assets/images/analytics-config-c5809ed1d12d524d442efe428949c4f3.png"},1255:function(e,t,n){t.Z=n.p+"assets/images/analytics-import-events-editor-36648ae88f94faa5024079d39a54f623.png"}}]);